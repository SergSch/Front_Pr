1.
task #1
START
READ number n
IF n == 1 THEN return
FOR i = 1, i <= n, i + 1
	FOR j = 1; j <= n, j + 1
		print "*"
		BREAK
END


 Временная сложность алгоритма - O(n^2),при увеличении n вдвое, время выполнения алгоритма увеличится в четыре раза.
------------------------------
2.
task #2
START
READ number n
numbers i = 0, j = 0, a = 0
FOR i = n/2, i <= n; i + 1
	FOR j = 2, j <= n, j * 2
		a = a + n / 2
END


  Временная сложность алгоритма O(n * log(n)), время выполнения алгоритма увеличивается логарифмически относительно размера входных данных n.
------------------------------

3.
task #3
START
READ number n
number a = 0
FOR i = 0, i < n, i + 1
	FOR j = n, j > i, j - 1
		a = a + i + j
END


  Временная сложность алгоритма составляет O(n^3),  время выполнения алгоритма растет кубически относительно размера входных данных n.
------------------------------------

4. 
task #4
START
READ number n
numbers a = 0, i = n
WHILE i > 0
	a = a + i
	i = i / 2
END


  Временная сложность алгоритма O(log2(n)), время выполнения алгоритма растет логарифмически относительно размера входных данных n.