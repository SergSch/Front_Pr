// https://habr.com/ru/articles/439746/

// Введение в асинхронный код
// Асинхронный код - это код (или скрипт) на выполнение которого требуется n-время

// Функция setTimeout() - функция, которая формирует задержку в указаннов колбек-функции

// -----------------------------
// Пример (1) работы скрипта учитывая асинхронную конструкцию

// setTimeout(() => {
//     console.log(1)
// }, 1)

// console.log(2)

// console.log(3)

// -------------
// Порядок выполнения логов:
// 2
// 3
// 1

// Во время выполнения скрипта, синхронная часть кода НЕ БУДЕТ дожидаться, пока
// будет идти выполнение асихнронной части

// --------------------------------
// Пример 2
// Логи в консоль происходят в произвольном порядке

// setTimeout(() => {
//     console.log('1 блок кода')
// }, Math.random() * 200)

// setTimeout(() => {
//     console.log('2 блок кода')
// }, Math.random() * 200)

// --------------------------
// Решение проблемы - вложенность (не верный подход)

// setTimeout(() => {
//     console.log('1 блок кода')
//     let a = [1,2,3]

//     setTimeout(() => {
//         console.log('2 блок кода', a)
//     }, Math.random() * 200)

// }, Math.random() * 200)

// ----------------------------------------------------------
// Promise
// Promise - это объект, который является обверткой для удобной работы с асихнронным кодом

// let promise = new Promise((resolve, reject) => {
//     setTimeout(() => {
//         console.log('1 блок кода')
//         let a = [1,2,3]
//         // resolve(a)
//         reject('error!')
//     }, Math.random() * 200)
// })

// ----------------
// Метод then дожидается пока promise увидит выполнение функции resolve и только потом начнем выпонление указанного колбека
// То, что мы получаем в колбеке метода then в качестве аргумента - это содержимое указанного параметра функции resolve

// promise.then((a) => {
//     a.push(4)
//     console.log(2, a)
// })

// ------------------
// Метод catch делает тоже самое, что и then, только дожидается уже выполнения функции reject в промисе

// promise.catch((error) => {
//     console.log(error)
// })

// promise
//     .then((a) => {
//         a.push(4)
//         console.log(2, a)
//     })
//     .catch((error) => {
//         console.log(error)
//     })

// ------------------------------------------

// let getData = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     console.log('1 блок кода');
//     resolve();
//   }, Math.random() * 200);
// });

// getData
//   .then(() => {
//     return new Promise((resolve, reject) => {
//       setTimeout(() => {
//         console.log('2 блок кода');
//         resolve(5);
//       }, Math.random() * 200);
//     });
//   })
//   .then((data) => {
//     console.log(data);
//   });
