{"ast":null,"code":"var _jsxFileName = \"D:\\\\TelRan\\\\Front_Pr\\\\Practice\\\\practice_34_react_useEffect\\\\src\\\\components\\\\loginForm\\\\LoginForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SimpleParagraph from \"../simpleParagraph/SimpleParagraph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm(props) {\n  _s();\n  const [login, setLogin] = useState('');\n  const [passwd, setPasswd] = useState('');\n  const [error, setError] = useState('');\n  const [attempts, setAttempts] = useState([]);\n  const clickHandler = () => {\n    if (!login || !passwd) {\n      setError('Fill all fields!');\n    } else {\n      // setError('');\n      const attemptData = {\n        id: Date.now(),\n        login: login,\n        pwd: passwd\n      };\n      setAttempts([...attempts, attemptData]);\n      props.successLoginHandler(login);\n    }\n  };\n  console.log('Render LoginForm');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: login,\n      onChange: event => {\n        console.log('handle1');\n        setLogin(event.target.value);\n      },\n      placeholder: \"Login\",\n      type: \"text\",\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: passwd,\n      onChange: event => {\n        console.log('handle2');\n        setPasswd(event.target.value);\n      },\n      placeholder: \"Password\",\n      type: \"password\",\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(SimpleParagraph, {\n      text: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"Enter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), attempts.map(attempt => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: attempt.login + \" \" + attempt.pwd\n      }, attempt.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n// 4. Усложняем работу с эффектами - работаем с массивом зависимостей. В компоненте `LoginForm`, нам нужно при КАЖДОМ изменении текста в поле `login` выводить в консоль сообщение \"Login is changed\".\n_s(LoginForm, \"07iuAD5aEhvmNNZYMCaKssqazXY=\");\n_c = LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","SimpleParagraph","jsxDEV","_jsxDEV","LoginForm","props","_s","login","setLogin","passwd","setPasswd","error","setError","attempts","setAttempts","clickHandler","attemptData","id","Date","now","pwd","successLoginHandler","console","log","children","value","onChange","event","target","placeholder","type","className","fileName","_jsxFileName","lineNumber","columnNumber","text","onClick","map","attempt","_c","$RefreshReg$"],"sources":["D:/TelRan/Front_Pr/Practice/practice_34_react_useEffect/src/components/loginForm/LoginForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport SimpleParagraph from \"../simpleParagraph/SimpleParagraph\";\n\nexport default function LoginForm( props ) {\n\n  const [login, setLogin] = useState('');\n  const [passwd, setPasswd] = useState('');\n\n  const [error, setError] = useState('');\n\n  const [attempts, setAttempts] = useState([]);\n\n  const clickHandler = () => {\n    if (!login || !passwd) {\n      setError('Fill all fields!')\n    }\n    else {\n      // setError('');\n      const attemptData = {\n        id: Date.now(),\n        login: login,\n        pwd: passwd\n      };\n\n      setAttempts( [...attempts, attemptData] );\n      props.successLoginHandler(login);\n    }\n  }\n\n  console.log('Render LoginForm');\n  return (\n    <div>\n      <input\n        value={login}\n        onChange={ (event) => { console.log('handle1'); setLogin(event.target.value) } }\n        placeholder=\"Login\" type=\"text\" className=\"input\"\n      />\n\n      <input\n        value={passwd}\n        onChange={ (event) => { console.log('handle2'); setPasswd(event.target.value) } }\n        placeholder=\"Password\" type=\"password\" className=\"input\"\n      />\n\n      { error && <SimpleParagraph text={error}/> }\n\n      <button onClick={clickHandler}>Enter</button>\n\n      {\n        attempts.map( attempt => {\n          return <p key={attempt.id}>{attempt.login + \" \" + attempt.pwd}</p>\n        })\n      }\n    </div>\n  );\n}\n\n\n// 4. Усложняем работу с эффектами - работаем с массивом зависимостей. В компоненте `LoginForm`, нам нужно при КАЖДОМ изменении текста в поле `login` выводить в консоль сообщение \"Login is changed\"."],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}