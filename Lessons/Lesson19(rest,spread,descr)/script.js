// Rest и Spread операторы

// let a = [1,2,3,4,5,6]

// Что делает распоковка
// console.log(...a)
// console.log(1,2,3,4,5,6)

// Распокавка должна быть в контексте
// ...a = 1,2,3,4,5,6
// (...a) = (1,2,3,4,5,6)
// [...a] = [1,2,3,4,5,6]

// Лучше так не делать
// let b = 1,2,3,4,5,6
// let b = ...a

// ---------------------------
// Rest     -  собирает данные
// Spread   -  распаковывает

// function log(...a){
//     console.log(...a)
// }

// log(10,20,30,40)
// log(10,20,30,40,50,60,60,60,60)
// log(10)

// ----------------------------
// Задача
// Напишите функцию quad(), которая будет принимать n-ое количество аргументов в виде чисел
// и в консоль выводить значение квадрата каждого числа через пробел

// function quad(...numbers){
//     let new_array = numbers.map(elem => elem ** 2)
//     console.log(...new_array)
// }

// quad(1,2,3)
// quad(5)
// quad(4,4,4,4,4,4,4)

// ----------------------------
// Задача 2
// Напишите функцию sum()которая будет принимать n-ое количество аргументов в виде чисел
// и в консоль выводить значение cуммы всех указанныъ чисел

// sum(1,2,3) => 6
// sum(1,1,1,1,1,1,1) => 7

// Решение 1
// function sum(...numbers){
//     let sum = 0
//     for (let elem of numbers){
//         sum += elem
//     }
//     console.log(sum)
// }

// Решение 2
// function sum(...numbers){
//     console.log(numbers.reduce((acum, elem) => acum + elem))
// }

// sum(3,3,3)
// sum(3,3)
// sum(1,1,1,1,1,1,1,1)

// ------------------------
// Еще один пример контсрукции rest оператора внутри функции

// function log(a, ...b){
//     console.log(...a)   1
//     console.log(b)   [ 2, 3, 4 ]
// }

// log(1,2,3,4)

// ------------------------------------------------
// Деструктуризация - это возможность создать n-ое количество перременных одной строчокй кода
// Назначение - это создание отдельных выражений, которые содежрат данные объекта

// let a = 10
// let b = 20
// let c = 30

// Присвоение идет по указанному порядку выражений
// let [a,b,c] = [10,20,30]

// console.log(a) 10
// console.log(b) 20
// console.log(c) 30

// ---------------------------------------
// Пример деструктурзиации
// let contact = [89999999999, 'Alex', 'm']

// let phone = contact[0]
// let name = contact[1]
// let gender = contact[2]

// Абсолютно такое же решение
// let [phone, name, gender] = contact

// ------------------------------------
// Возможные случаи деструктуризации

// Присвоение будет идти слева-направо, указанные значения 4 и 5 вовсе учитываться в присвоении не будут.
// let [a,b,c] = [1,2,3,4,5]

// console.log(a)  1
// console.log(b)  2
// console.log(c)  3

// ---------------
// Немного другой случай
// let [a,b,c,d] = [1,2]

// console.log(a)   1
// console.log(b)   2
// console.log(c)   undefined
// console.log(d)   undefined

// ---------------------------------------
// Применение rest опретора внутри деструктуризации

// let [a,...b] = [1,2,3,4]
// В этом примере переменная a будет хранить число 1
// а переменная b будет хранить остаток дестркуктуризации в виде массива

// console.log(a)  1
// console.log(b)  [ 4, 5, 6, 7 ]

// -------------------------------------------
// Пример деструктуризации с объектами
// let obj = {
//     name: 'Alex',
//     age: 30
// }

// let {age, name} = obj
// // В качестве имени прееменной мы должны указать значение ключа, иначе присвоение вернет undefined

// console.log(name)
// console.log(age)

// ----------------------------
// rest оператор внутри деструктуризации объекта

// let obj = {
//     name: 'Alex',
//     age: 30,
//     salary: 1000
// }

// let {name, ...user_info} = obj

// console.log(name)            Alex
// console.log(user_info)       { age: 30, salary: 1000 }

// -------------------------------------------------------

// Флаги и дексрипторы свойств

// writable     -   сво-во (или флаг), который запрещает/разрешает менять занчение сво-ва
// enumerable   -   сво-во (или флаг), который запрещает итерироваться этому сво-ву
// configurable -   сво-во (или флаг), который запрещает/разрешает удалять сво-во

let obj = {
  title: 'О погоде',
  text: 'текст о погоде',
};

// -------------------------------
// Object.getOwnPropertyDescriptor(obj, 'key') - метод, который позволяет получить информацию о флагах указанного свойства объекта

// console.log(Object.getOwnPropertyDescriptor(obj,'text'))
// {
//     value: 'текст о погоде',
//     writable: true,
//     enumerable: true,
//     configurable: true
//   }

// --------------------------------
// Чтобы изменить значение флага, необхжимо использовать
// Object.defineProperty(obj, 'key', {flag: false})

// --------------------------
// writable

// Object.defineProperty(obj, 'text', {writable: false})

// сво-во text не будет переопределено, поскольку данную возможность мы отключили
// obj.text = 'Hello world!'
// console.log(obj)

// ----------------------------
// enumerable
// Object.defineProperty(obj, 'text', {enumerable: false})

// Сво-во text не будет участвовать внутри цикла и создавать итерацию
// for (let key in obj){
//     console.log(key, obj[key])
// }
// title О погоде

// console.log(obj)
// { title: 'О погоде' }

// console.log(obj.text)

// ------------------------------
// configurable

Object.defineProperty(obj, 'text', { configurable: false });

// Данное сво-во не будет удалено
delete obj.text;
obj.text = 'о велосипеде';

console.log(obj);
// { title: 'О погоде', text: 'текст о погоде' }
