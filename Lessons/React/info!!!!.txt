// ГЛАВА 1
1) Установка react в среду (выполнить только один раз)
npm i -g create-react-app

2) Установка приложения (выполнять каждый раз) (Конфигуратор)
npx create-react-app myapp

3) Запуск приложение
а) cd myapp (ОБЯЗАТЕЛЬНО!)
б) npm start
Чтобы выключить приложение, необходимо CNTRL+C

(В приложении можно в любой момент удалить папку node_modules)
Чтобы ее восстановить, необходимо выполнить команду
npm i

удалить node_modules, потом его запустить с 1 терминала

// ГЛАВА 2   (Приведение приложения в очещнный вид)
1) В папке PUBLIC удалить все кроме index.html
   Внутри index.html удалить все и заменить на EMMET (!) указав в body div элемент с id=root 
2) В папке SRC удалить все кроме index.js
В папке SRC оставить index, App (js) и App.css



// Информацция
1) Первое правило JSX
Компонент может возвращать НЕ БОЛЬШЕ одного узла (внутри элементов может быть сколько угодно)
Чтобы удовлетворить правило, но при этом не создавать вложенность, можно использовать: 
    <>
      <button>Some Button!</button>
      <div>123</div>
    </>


2) Второе правило JSX 
Чтобы учесть JS выражение внутри разметки - необходимо использовать фигурные скобки {}
По аналогии, как это работает в интерполяции 

Пример с интерполяцией
`${3 + 3} + 3` => '6 + 3'

Пример внутри компонента
let a = 3
return(
  <p>{a + 3} + 3</p>  =>   <p>6 + 3</p>
)

3) Третие правило JSX
Внутри JS выражения можно сразу перейти в разметку (не указывая какие-то символы)
НО если в этой же разметке надо надо опять учесть JS выражение - второе правило необходимо повторить

<div>
  {10 == 10 && <p>{string}</p>}
</div>


// Стилизация
1) Общая стилизация
2) Модульная стилизация (на след занятии)


// Атрибут style представлят объект

<p style='width: 10px; background-color: red'>

В ректе 
<p style={{width: '100px', backgroundColor: 'red'}}>