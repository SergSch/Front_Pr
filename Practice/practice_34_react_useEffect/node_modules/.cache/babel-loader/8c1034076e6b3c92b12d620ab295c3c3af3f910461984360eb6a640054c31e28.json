{"ast":null,"code":"var _jsxFileName = \"D:\\\\TelRan\\\\Front_Pr\\\\Practice\\\\practice_34_react_useEffect\\\\src\\\\components\\\\greeting\\\\Greeting.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Greeting({\n  name\n}) {\n  _s();\n  const [time, setTime] = useState();\n  useEffect(() => {\n    console.log('The Greeting component had been rendered!');\n    return () => {\n      console.log('The Greeting component will be unmounted!');\n    };\n  }, []);\n  useEffect(() => {\n    setInterval(() => {\n      time;\n    }, 1000);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Hello, ${!name ? 'visitor' : name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// 3. Дорабатываем компонент `Greeting`. Мы хотим, чтобы в нем отображались текущие время и дата с точностью до секунды. Нам нужно в компоненте `Greeting`, добавить параграф, в котором будет отображаться время и дата. При этом, это должно обновляться каждую секунду.\n\n// Подсказка: здесь нам пригодится `setInterval`. То есть, нам нужно при монтировании компонента Greeting, запустить interval, который будет каждую секунду обновлять время.\n\n// 1. Разбираемся со связью жизненного цикла компонента и хуком `useEffect`. Работаем с компонентом `Greeting`. Нужно, чтобы при ПЕРВОМ рендере нашего компонента, выводилось сообщение в консоль 'The Greeting component had been rendered!'. Уточнение: компонент `Greeting` теперь рендерится/прячется при нажатии на кнопку \"Toggle Greeting Visibility\".\n\n// 2. Теперь сделаем так, чтобы при размонтировании (удалении из DOM) нашего компонента, в консоль отображалось сообщение 'The Greeting component will be unmounted!'.\n_s(Greeting, \"p+Enq4tBFR4UEihFGZ5kQY2qiLo=\");\n_c = Greeting;\nvar _c;\n$RefreshReg$(_c, \"Greeting\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Greeting","name","_s","time","setTime","console","log","setInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/TelRan/Front_Pr/Practice/practice_34_react_useEffect/src/components/greeting/Greeting.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useState } from 'react';\n\nexport default function Greeting({ name }) {\n  const [time, setTime] = useState();\n  useEffect(() => {\n    console.log('The Greeting component had been rendered!');\n    return () => {\n      console.log('The Greeting component will be unmounted!');\n    };\n  }, []);\n\n  useEffect(() => {\n    setInterval(() => {\n      time;\n    }, 1000);\n  });\n\n  return (\n    <>\n      <p>{`Hello, ${!name ? 'visitor' : name}`}</p>\n      <p>{time}</p>\n    </>\n  );\n}\n\n// 3. Дорабатываем компонент `Greeting`. Мы хотим, чтобы в нем отображались текущие время и дата с точностью до секунды. Нам нужно в компоненте `Greeting`, добавить параграф, в котором будет отображаться время и дата. При этом, это должно обновляться каждую секунду.\n\n// Подсказка: здесь нам пригодится `setInterval`. То есть, нам нужно при монтировании компонента Greeting, запустить interval, который будет каждую секунду обновлять время.\n\n// 1. Разбираемся со связью жизненного цикла компонента и хуком `useEffect`. Работаем с компонентом `Greeting`. Нужно, чтобы при ПЕРВОМ рендере нашего компонента, выводилось сообщение в консоль 'The Greeting component had been rendered!'. Уточнение: компонент `Greeting` теперь рендерится/прячется при нажатии на кнопку \"Toggle Greeting Visibility\".\n\n// 2. Теперь сделаем так, чтобы при размонтировании (удалении из DOM) нашего компонента, в консоль отображалось сообщение 'The Greeting component will be unmounted!'.\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjC,eAAe,SAASC,QAAQA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAClCD,SAAS,CAAC,MAAM;IACdW,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IACxD,OAAO,MAAM;MACXD,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAC1D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENZ,SAAS,CAAC,MAAM;IACda,WAAW,CAAC,MAAM;MAChBJ,IAAI;IACN,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;EAEF,oBACEN,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAK,UAAS,CAACP,IAAI,GAAG,SAAS,GAAGA,IAAK;IAAC;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7Cf,OAAA;MAAAW,QAAA,EAAIL;IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eACb,CAAC;AAEP;;AAEA;;AAEA;;AAEA;;AAEA;AAAAV,EAAA,CA7BwBF,QAAQ;AAAAa,EAAA,GAARb,QAAQ;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}