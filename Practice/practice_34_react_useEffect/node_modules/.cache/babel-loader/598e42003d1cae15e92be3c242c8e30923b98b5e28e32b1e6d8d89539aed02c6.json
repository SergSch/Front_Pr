{"ast":null,"code":"var _jsxFileName = \"D:\\\\TelRan\\\\Front_Pr\\\\Practice\\\\practice_34_react_useEffect\\\\src\\\\components\\\\ProductList\\\\ProductList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ProductCard from '../ProductCard/ProductCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProductList() {\n  _s();\n  const [dataProducts, setDataProducts] = useState('Подождите, идет загрузка...');\n  useEffect(() => {\n    fetch('https://dummyjson.com/products').then(response => response.json()).then(json => {\n      setDataProducts(json);\n      console.log(dataProducts);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: dataProducts.products && dataProducts.products.map(elem => /*#__PURE__*/_jsxDEV(ProductCard, {\n      title: elem.title,\n      price: elem.price,\n      description: elem.description\n    }, elem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n// 6. Создаем компонент для списка товаров, `ProductList`. Он будет рендерить список товаров. Первый шаг - научиться загружать это список с бэка, с адреса `https://dummyjson.com/products`. Нужно при монтировании компонента (первый рендер), загружать этот список, и сохранять ответ в локальном стейте. ВАЖНО! Асинхронную операцию (обращение к бэку), нужно сделать в эффекте!\n_s(ProductList, \"ZsEDg4J0DiCNRkFarJo3dyy764M=\");\n_c = ProductList;\nvar _c;\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useEffect","useState","ProductCard","jsxDEV","_jsxDEV","ProductList","_s","dataProducts","setDataProducts","fetch","then","response","json","console","log","children","products","map","elem","title","price","description","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/TelRan/Front_Pr/Practice/practice_34_react_useEffect/src/components/ProductList/ProductList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ProductCard from '../ProductCard/ProductCard';\r\n\r\nexport default function ProductList() {\r\n  const [dataProducts, setDataProducts] = useState(\r\n    'Подождите, идет загрузка...'\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch('https://dummyjson.com/products')\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        setDataProducts(json);\r\n        console.log(dataProducts);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {dataProducts.products &&\r\n        dataProducts.products.map((elem) => (\r\n          <ProductCard\r\n            key={elem.id}\r\n            title={elem.title}\r\n            price={elem.price}\r\n            description={elem.description}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 6. Создаем компонент для списка товаров, `ProductList`. Он будет рендерить список товаров. Первый шаг - научиться загружать это список с бэка, с адреса `https://dummyjson.com/products`. Нужно при монтировании компонента (первый рендер), загружать этот список, и сохранять ответ в локальном стейте. ВАЖНО! Асинхронную операцию (обращение к бэку), нужно сделать в эффекте!\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAC9C,6BACF,CAAC;EAEDD,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAK;MACdJ,eAAe,CAACI,IAAI,CAAC;MACrBC,OAAO,CAACC,GAAG,CAACP,YAAY,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEH,OAAA;IAAAW,QAAA,EACGR,YAAY,CAACS,QAAQ,IACpBT,YAAY,CAACS,QAAQ,CAACC,GAAG,CAAEC,IAAI,iBAC7Bd,OAAA,CAACF,WAAW;MAEViB,KAAK,EAAED,IAAI,CAACC,KAAM;MAClBC,KAAK,EAAEF,IAAI,CAACE,KAAM;MAClBC,WAAW,EAAEH,IAAI,CAACG;IAAY,GAHzBH,IAAI,CAACI,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIb,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;;AAEA;AAAApB,EAAA,CA7BwBD,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}